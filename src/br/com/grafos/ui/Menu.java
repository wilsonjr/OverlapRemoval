/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package br.com.grafos.ui;


import br.com.grafos.desenho.color.RainbowScale;
import br.com.metodos.overlap.hexboard.HexBoardExecutor;
import br.com.metodos.overlap.incboard.IncBoardExecutor;
import br.com.metodos.overlap.incboard.PontoItem;
import br.com.metodos.overlap.prism.PRISM;
import br.com.metodos.overlap.projsnippet.ProjSnippet;
import br.com.metodos.overlap.rwordle.RWordleC;
import br.com.metodos.overlap.rwordle.RWordleL;
import br.com.metodos.overlap.vpsc.VPSC;
import br.com.metodos.utils.Retangulo;
import br.com.metodos.utils.RetanguloVis;
import br.com.metodos.utils.Util;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author wilson
 */
public class Menu extends javax.swing.JFrame {
    private ViewPanel view;
    private ArrayList<RetanguloVis> rectangles;
    private double alpha = 0;
    private int globalCounter = 0;
    private int globalCounterColor = 0;
    private boolean loadedData = false;
    private ArrayList<Point> hexPoints;
    /**
     * Creates new form Menu
     */
    public Menu() {
        hexPoints = new ArrayList<>();
        view = new ViewPanel();
        initComponents();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        URL url = this.getClass().getResource("simpleGraph.png");    
        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(url);
        setIconImage(iconeTitulo);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        telaJScrollPane = new JScrollPane(view);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        sairJMenuItem = new javax.swing.JMenuItem();
        loadDataJMenuItem = new javax.swing.JMenuItem();
        saveDataCoordJMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        limparJMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        rwordleCJMenuItem = new javax.swing.JMenuItem();
        rwordleLJMenuItem = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        vpscJMenuItem = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        prismJMenuItem = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        projSnippetJMenuItem = new javax.swing.JMenuItem();
        jSeparator11 = new javax.swing.JPopupMenu.Separator();
        incBoardJMenuItem = new javax.swing.JMenuItem();
        hexBoardJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("Arquivo");

        sairJMenuItem.setText("Sair");
        sairJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairJMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(sairJMenuItem);

        loadDataJMenuItem.setText("Carregar Dados");
        loadDataJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataJMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(loadDataJMenuItem);

        saveDataCoordJMenuItem.setText("Salvar Dados (Coordenadas)");
        saveDataCoordJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDataCoordJMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveDataCoordJMenuItem);
        jMenu1.add(jSeparator1);

        limparJMenuItem.setText("Limpar");
        limparJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparJMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(limparJMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Algoritmos");

        rwordleCJMenuItem.setText("RWordle-C");
        rwordleCJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rwordleCJMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(rwordleCJMenuItem);

        rwordleLJMenuItem.setText("RWordle-L");
        rwordleLJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rwordleLJMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(rwordleLJMenuItem);
        jMenu2.add(jSeparator8);

        vpscJMenuItem.setText("VPSC");
        vpscJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vpscJMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(vpscJMenuItem);
        jMenu2.add(jSeparator9);

        prismJMenuItem.setText("PRISM");
        prismJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prismJMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(prismJMenuItem);
        jMenu2.add(jSeparator10);

        projSnippetJMenuItem.setText("ProjSnippet");
        projSnippetJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projSnippetJMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(projSnippetJMenuItem);
        jMenu2.add(jSeparator11);

        incBoardJMenuItem.setText("IncBoard");
        incBoardJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incBoardJMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(incBoardJMenuItem);

        hexBoardJMenuItem.setText("HexBoard");
        hexBoardJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hexBoardJMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(hexBoardJMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(telaJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(telaJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void sairJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairJMenuItemActionPerformed
        dispose();
    }//GEN-LAST:event_sairJMenuItemActionPerformed

    private void loadDataJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataJMenuItemActionPerformed
        JFileChooser jFileChooser = new JFileChooser();
        int result = jFileChooser.showOpenDialog(this);
        if( result == JFileChooser.APPROVE_OPTION ) {
            try {                 
                File file = jFileChooser.getSelectedFile();
                Scanner scn = new Scanner(file);
                rectangles.clear();
                RainbowScale rbS = new RainbowScale();
                int id = 0;
                while( scn.hasNext() ) {
                    String[] linha = scn.nextLine().split(";");
                    double x = Double.parseDouble(linha[1]);
                    double y = Double.parseDouble(linha[2]);
                    int grupo = id;//Integer.parseInt(linha[3]);

                    rectangles.add(new RetanguloVis(x, y, 30, 30, rbS.getColor((grupo*10)%255), id++));                
                }

                loadedData = true;
                if( view != null ) {
                    view.cleanImage();
                    view.repaint();            
                }
            } catch( FileNotFoundException e ) {

            }
        }
    }//GEN-LAST:event_loadDataJMenuItemActionPerformed

    private void rwordleCJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rwordleCJMenuItemActionPerformed
        ArrayList<Retangulo> rects = Util.toRetangulo(rectangles);
        double[] center0 = Util.getCenter(rects);
        ArrayList<Retangulo> projected = RWordleC.apply(rects);
        double[] center1 = Util.getCenter(projected);
        
        double ammountX = center0[0]-center1[0];
        double ammountY = center0[1]-center1[1];
        Util.translate(projected, ammountX, ammountY);
        
        Util.normalize(projected);
        Util.toRetanguloVis(rectangles, projected);

        view.cleanImage();
        view.repaint();
    }//GEN-LAST:event_rwordleCJMenuItemActionPerformed

    private void rwordleLJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rwordleLJMenuItemActionPerformed
        try {
            alpha = 0;//Double.parseDouble(anguloJTextField.getText());
        } catch( NumberFormatException e ) {
            alpha = 0;
        }
        
        ArrayList<Retangulo> rects = Util.toRetangulo(rectangles);
        double[] center0 = Util.getCenter(rects);
        //ArrayList<Retangulo> projected  = RWordleL.apply(rects, alpha, recentralizarJCheckBox.isSelected());
        ArrayList<Retangulo> projected = RWordleL.apply(rects, alpha, false);
        double[] center1 = Util.getCenter(projected);
                
        double ammountX = center0[0]-center1[0];
        double ammountY = center0[1]-center1[1];
        Util.translate(projected, ammountX, ammountY);
        
        Util.normalize(projected);
        Util.toRetanguloVis(rectangles, projected);

        view.cleanImage();
        view.repaint();
    }//GEN-LAST:event_rwordleLJMenuItemActionPerformed

    private void vpscJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vpscJMenuItemActionPerformed
        ArrayList<Retangulo> rects = Util.toRetangulo(rectangles);
        double[] center0 = Util.getCenter(rects);
        ArrayList<Retangulo> projected = VPSC.apply(rects, 0, 0);
        double[] center1 = Util.getCenter(projected);
        
        int i = 0;
        for( Retangulo r: projected ) 
            r.setId(i++);       
        
        double ammountX = center0[0]-center1[0];
        double ammountY = center0[1]-center1[1];
        Util.translate(projected, ammountX, ammountY);
                
        Util.normalize(projected);        
        Util.toRetanguloVis(rectangles, projected);
        
        view.cleanImage();
        view.repaint();
    }//GEN-LAST:event_vpscJMenuItemActionPerformed

    private void prismJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prismJMenuItemActionPerformed
        ArrayList<Retangulo> rects = Util.toRetangulo(rectangles);        
        double[] center0 = Util.getCenter(rects);
        ArrayList<Retangulo> projected = PRISM.apply(rects);
        double[] center1 = Util.getCenter(projected);
        
        int i = 0;
        for( Retangulo r: projected )
            r.setId(i++);        
        
        double ammountX = center0[0]-center1[0];
        double ammountY = center0[1]-center1[1];
        Util.translate(projected, ammountX, ammountY);
        
        Util.normalize(projected);
        Util.toRetanguloVis(rectangles, projected);
        
        view.cleanImage();
        view.repaint();
    }//GEN-LAST:event_prismJMenuItemActionPerformed

    private void projSnippetJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projSnippetJMenuItemActionPerformed
        ArrayList<Retangulo> rects = Util.toRetangulo(rectangles);
        
        int i = 0;
        for( Retangulo r: rects )
            r.setId(i++);
        double[] center0 = Util.getCenter(rects);
        //ArrayList<Retangulo> projected = ProjSnippet.e_o(rects, Double.parseDouble(projSnippetAlphaJTextField.getText()));
        
        String alpha_value = JOptionPane.showInputDialog("Por favor, insira o valor para 'alpha':");
        String k_value = JOptionPane.showInputDialog("Por favor, insira o valor de 'k':");
        
        
        ArrayList<Retangulo> projected = ProjSnippet.apply(rects, Double.parseDouble(alpha_value), Integer.parseInt(k_value)+1);
        if( projected != null ) {
            
            double[] center1 = Util.getCenter(projected);
            i = 0;
            for( Retangulo r: projected )
                r.setId(i++);        

            double ammountX = center0[0]-center1[0];
            double ammountY = center0[1]-center1[1];
            Util.translate(projected, ammountX, ammountY);

            Util.normalize(projected);
            Util.toRetanguloVis(rectangles, projected);

            view.cleanImage();
            view.repaint();
        } else
            JOptionPane.showMessageDialog(this, "Houve um problema ao aplicar o método Projsnippet.");
    }//GEN-LAST:event_projSnippetJMenuItemActionPerformed

    private void incBoardJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incBoardJMenuItemActionPerformed
        
        JFileChooser jFileChooser = new JFileChooser();

        int result = jFileChooser.showOpenDialog(this);
        if( result == JFileChooser.APPROVE_OPTION ) {
            try {                 
                File file = jFileChooser.getSelectedFile();

                rectangles.clear();
                ArrayList<PontoItem> items = new ArrayList<>();
                Scanner scn = new Scanner(file);
                for( int i = 0; i < 4; ++i ) 
                    if( scn.hasNext() )
                        scn.nextLine();
                
                int id = 0;
                while( scn.hasNext() ) {
                    String[] linha = scn.nextLine().split(";");
                    int grupo = Integer.parseInt(linha[linha.length-1]);
                    double[] dims = new double[linha.length-2];
                    for( int i = 1, j = 0; i < linha.length-1; ++i )
                        dims[j++] = Double.parseDouble(linha[i]);            
                    items.add(new PontoItem(dims, String.valueOf(id), id, grupo));
                    id++;
                }

                IncBoardExecutor executor = new IncBoardExecutor();
                executor.apply(items);
                
                rectangles.clear();
                int ymin = Math.abs(executor.getMinRow());
                int xmin = Math.abs(executor.getMinCol());
                RainbowScale rbS = new RainbowScale();
                for( PontoItem d: executor.getItems() ) {
                    rectangles.add(new RetanguloVis(30*(d.getCol()+xmin), 30*(d.getRow()+ymin), 
                                                    30, 30, rbS.getColor((d.getGrupo()*10)%255), 
                                                    d.getId()));
                }

                if( view != null ) {
                    view.cleanImage();
                    view.repaint();            
                }
            }catch(IOException e) {

            }
        }
    }//GEN-LAST:event_incBoardJMenuItemActionPerformed

    private void hexBoardJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hexBoardJMenuItemActionPerformed
        
        JFileChooser jFileChooser = new JFileChooser();

        int result = jFileChooser.showOpenDialog(this);
        if( result == JFileChooser.APPROVE_OPTION ) {
            try {                 
                File file = jFileChooser.getSelectedFile();

                rectangles.clear();
                ArrayList<PontoItem> items = new ArrayList<>();
                Scanner scn = new Scanner(file);
                for( int i = 0; i < 4; ++i ) 
                    if( scn.hasNext() )
                        scn.nextLine();
                
                int id = 0;
                while( scn.hasNext() ) {
                    String[] linha = scn.nextLine().split(";");
                    int grupo = Integer.parseInt(linha[linha.length-1]);
                    double[] dims = new double[linha.length-2];
                    for( int i = 1, j = 0; i < linha.length-1; ++i )
                        dims[j++] = Double.parseDouble(linha[i]);            
                    items.add(new PontoItem(dims, String.valueOf(id), id, grupo));
                    ++id;
                }

                HexBoardExecutor executor = new HexBoardExecutor();
                executor.apply(items);

                int zMin = executor.getMinRow()-executor.getMinCol();
                
                int minDist = Integer.MAX_VALUE;
                PontoItem q = null;
                int zMIN = Integer.MAX_VALUE;
                for( PontoItem d: executor.getItems() ) {
                    int z = d.getRow()-d.getCol();
                    if( z < zMIN )
                        zMIN = z;
                    int x;
                    if( zMin > z )
                        x = executor.getMinRow()+((Math.abs(zMin)+Math.abs(z))/2);
                    else
                        x = executor.getMinRow()-((Math.abs(zMin)+Math.abs(z))/2);
                    int dist = d.getCol()-x;
                    if( dist < minDist ) {
                        minDist = dist;
                        q = d;
                    }                    
                }

                int xmin = 30;
                int a  = (int)Math.sqrt( (30*30) - (Math.pow(30/2,2)) );
                RainbowScale rbS = new RainbowScale();
                for( PontoItem d: executor.getItems() ) {
                    int z = d.getRow() - d.getCol();
                    int centerHexY = (3*30/2)*(z + Math.abs(zMIN))+30;
                    int distancia = (Math.abs(q.getRow()-d.getRow())+Math.abs(q.getCol()-d.getCol()))*a + xmin;

                    rectangles.add(new RetanguloVis(distancia-(30/2), centerHexY-(30/2), 30, 30, 
                            d.getGrupo() == 1 ? rbS.getColor(5) : d.getGrupo() == 2 ? rbS.getColor(120) : rbS.getColor(200),
                            d.getId()));
                    rectangles.get(rectangles.size()-1).setP(new Point(distancia, centerHexY));
                    rectangles.get(rectangles.size()-1).setIsHexBoard(true);
                }
                view.cleanImage();
                view.repaint();
            } catch( IOException e ) {

            }
        }
    }//GEN-LAST:event_hexBoardJMenuItemActionPerformed

    private void limparJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparJMenuItemActionPerformed
        embaralha();
    }//GEN-LAST:event_limparJMenuItemActionPerformed

    private void saveDataCoordJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDataCoordJMenuItemActionPerformed
        JFileChooser jFileChooser = new JFileChooser();

        int result = jFileChooser.showSaveDialog(this);
        if( result == JFileChooser.APPROVE_OPTION ) {
            try {
                File file = jFileChooser.getSelectedFile();
                FileWriter fw = new FileWriter(file.getAbsoluteFile());
                try( BufferedWriter bw = new BufferedWriter(fw) ) {
                    ArrayList<Retangulo> retangulos = Util.toRetangulo(rectangles);
                    int i = 0;
                    for( Retangulo r: retangulos ) {
                        bw.write(i+";"+r.getLX()+";"+r.getLY()+";"+i+"\n");
                        ++i;
                    }
                }
            } catch( IOException e ) {
                
            }
        }
    }//GEN-LAST:event_saveDataCoordJMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }
    
    private void embaralha() {
        globalCounterColor = globalCounter = 0;
        rectangles.clear();
       
        if( view != null ) {
            view.cleanImage();
            view.repaint();            
        }
    }
    
    
    public class ViewPanel extends JPanel {
        private Color color = Color.RED;
        
        private double iniX, iniY, fimX, fimY;
        
        private BufferedImage imageBuffer;
        
        public ViewPanel() {
            setBackground(Color.WHITE);
            setLayout(new FlowLayout(FlowLayout.LEFT));
            rectangles = new ArrayList<>();
            
            addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    iniX = e.getX();
                    iniY = e.getY();
                }   
                
                @Override
                public void mouseReleased(MouseEvent e) {
                    fimX = e.getX();
                    fimY = e.getY();
                    
                    RainbowScale rbS = new RainbowScale();
                    rectangles.add(new RetanguloVis(iniX, iniY, Math.abs(fimX-iniX), Math.abs(fimY-iniY), 
                                                rbS.getColor((globalCounterColor++*10)%255), globalCounter++));                    
                    cleanImage();
                    repaint();    
                }                
            }); 
            cleanImage();
            repaint();            
        }
             
        
        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);
            
            if( imageBuffer == null ) {
                setPreferredSize(new Dimension(5000, 5000));
                this.imageBuffer = new BufferedImage(5000, 5000, BufferedImage.TYPE_INT_RGB);

                java.awt.Graphics2D g2Buffer = this.imageBuffer.createGraphics();
                g2Buffer.setColor(this.getBackground());
                g2Buffer.fillRect(0, 0, 5000, 5000);

                g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                for( RetanguloVis r: rectangles ) {                    
                    g2Buffer.setColor(r.cor);
                    
                    if( r.isHexBoard ) {
                        int a = (int)Math.sqrt(Math.pow(30, 2) - Math.pow(30/2, 2));
                        Point p = r.getP();
                        Polygon poly = new Polygon();
                        poly.addPoint(p.x, p.y - 30);
                        poly.addPoint(p.x + a, p.y - 30/2);
                        poly.addPoint(p.x + a, p.y + 30/2);
                        poly.addPoint(p.x, p.y + 30);
                        poly.addPoint(p.x - a, p.y + 30/2);
                        poly.addPoint(p.x - a, p.y - 30/2);
                        g2Buffer.fillPolygon(poly);
                        g2Buffer.setColor(Color.WHITE);
                        g2Buffer.drawPolygon(poly);
                    } else {
                        g2Buffer.fillRect((int)r.getUX(), (int)r.getUY(), (int)r.getWidth(), (int)r.getHeight());
                        g2Buffer.setColor(Color.BLACK);
                        g2Buffer.drawRect((int)r.getUX(), (int)r.getUY(), (int)r.getWidth(), (int)r.getHeight());
                    }
                    
                    g2Buffer.setColor(Color.WHITE);
                    g2Buffer.setFont(new Font("Helvetica", Font.PLAIN, 10));                    
                    g2Buffer.drawString(String.valueOf(r.numero), (int)r.getUX()+10, (int)r.getUY()+10);                           
                }
                g2Buffer.dispose();
            } 
            if( imageBuffer != null )  {
                g2.drawImage(this.imageBuffer, 0, 0, null);            
            }
        }
        
        public void cleanImage() {
            this.imageBuffer = null;
        }

    }
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem hexBoardJMenuItem;
    private javax.swing.JMenuItem incBoardJMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator11;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JMenuItem limparJMenuItem;
    private javax.swing.JMenuItem loadDataJMenuItem;
    private javax.swing.JMenuItem prismJMenuItem;
    private javax.swing.JMenuItem projSnippetJMenuItem;
    private javax.swing.JMenuItem rwordleCJMenuItem;
    private javax.swing.JMenuItem rwordleLJMenuItem;
    private javax.swing.JMenuItem sairJMenuItem;
    private javax.swing.JMenuItem saveDataCoordJMenuItem;
    private javax.swing.JScrollPane telaJScrollPane;
    private javax.swing.JMenuItem vpscJMenuItem;
    // End of variables declaration//GEN-END:variables
}
